{"version":3,"sources":["components/DicePicker/DicePicker.js","components/Dice/Dice.js","App.js","serviceWorker.js","index.js"],"names":["DicePicker","props","className","onClick","addDiceCallback","maxValue","id","uniqueId","classNames","require","Dice","diceValue","App","useState","rolledDice","setRolledDice","total","setTotal","rollDice","Math","floor","random","map","dice","value","removeIndex","indexOf","filter","item","removeDice","key","concat","newTotal","newRolledDice","newDice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6RAiBeA,MAbf,SAAoBC,GAClB,OACE,yBAAKC,UAAU,eACb,4BAAQA,UAAU,UAAUC,QAAS,WAAQF,EAAMG,gBAAgB,CAACC,SAAU,EAAGC,GAAIC,UAArF,KACA,4BAAQL,UAAU,UAAUC,QAAS,WAAQF,EAAMG,gBAAgB,CAACC,SAAU,EAAGC,GAAIC,UAArF,KACA,4BAAQL,UAAU,UAAUC,QAAS,WAAQF,EAAMG,gBAAgB,CAACC,SAAU,EAAGC,GAAIC,UAArF,KACA,4BAAQL,UAAU,WAAWC,QAAS,WAAQF,EAAMG,gBAAgB,CAACC,SAAU,GAAIC,GAAIC,UAAvF,MACA,4BAAQL,UAAU,WAAWC,QAAS,WAAQF,EAAMG,gBAAgB,CAACC,SAAU,GAAIC,GAAIC,UAAvF,MACA,4BAAQL,UAAU,WAAWC,QAAS,WAAQF,EAAMG,gBAAgB,CAACC,SAAU,GAAIC,GAAIC,UAAvF,QCVFC,G,MAAaC,EAAQ,KAqBVC,MAnBf,SAAcT,GACZ,OACE,4BACEC,UAAWM,EAAW,CACpB,MAAQ,EACR,GAAyB,MAAnBP,EAAMI,SACZ,GAAyB,MAAnBJ,EAAMI,SACZ,GAAyB,MAAnBJ,EAAMI,SACZ,IAA0B,OAAnBJ,EAAMI,SACb,IAA0B,OAAnBJ,EAAMI,SACb,IAA0B,OAAnBJ,EAAMI,WAEfF,QAAS,WAAOF,EAAME,YAVxB,IAYIF,EAAMI,SAZV,KAYsBJ,EAAMU,YCwDjBC,MArEf,WAAgB,IAAD,EAEuBC,mBAAS,IAFhC,mBAENC,EAFM,KAEMC,EAFN,OAGaF,mBAAS,GAHtB,mBAGNG,EAHM,KAGCC,EAHD,KA2Cb,SAASC,EAASb,GAGhB,OAFcc,KAAKC,MAAMD,KAAKE,SAAWhB,GAAY,EAKvD,OACE,yBAAKH,UAAU,OACb,yBAAKA,UAAU,mBACZY,EAAWQ,KAAI,SAACC,GAAD,OACd,kBAAC,EAAD,CACElB,SAAUkB,EAAKlB,SACfM,UAAWY,EAAKC,MAChBrB,QAAS,YA1CnB,SAAoBG,GAGlB,IAAImB,EAAcX,EAAWQ,KAC3B,SAACC,GAAW,OAAOA,EAAKjB,MAAMoB,QAAQpB,GAExCW,EAASD,EAAQF,EAAWW,GAAaD,OAEzCT,EAAcD,EAAWa,QAAO,SAAAC,GAAI,OAAIA,EAAKtB,KAAOA,MAkC3BuB,CAAWN,EAAKjB,KACjCwB,IAAKP,EAAKjB,QAId,yBAAKJ,UAAU,cAAf,UAAoCc,IAEtC,kBAAC,EAAD,CAAYZ,gBA1DhB,SAAoBmB,GAElBA,EAAKC,MAAQN,EAASK,EAAKlB,UAE3BU,EAAcD,EAAWiB,OAAOR,IAEhCN,EAASD,EAAQO,EAAKC,UAqDpB,4BAAQrB,QAvCZ,WACE,IAAI6B,EAAW,EACXC,EAAgBnB,EAAWQ,KAAI,SAACC,GAClC,IAAMW,EAAU,CACd5B,GAAIiB,EAAKjB,GACTD,SAAUkB,EAAKlB,SACfmB,MAAON,EAASK,EAAKlB,WAKvB,OAFA2B,GAAYE,EAAQV,MAEbU,KAGTnB,EAAckB,GACdhB,EAASe,KAwBP,UCzDcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3b174ff0.chunk.js","sourcesContent":["import React from 'react';\nimport './DicePicker.css';\nimport uniqueId from 'lodash/uniqueId';\n\nfunction DicePicker(props) {\n  return (\n    <div className=\"dice-picker\">\n      <button className='dice d4' onClick={() => { props.addDiceCallback({maxValue: 4, id: uniqueId()}) }}>4</button>\n      <button className='dice d6' onClick={() => { props.addDiceCallback({maxValue: 6, id: uniqueId()}) }}>6</button>\n      <button className='dice d8' onClick={() => { props.addDiceCallback({maxValue: 8, id: uniqueId()}) }}>8</button>\n      <button className='dice d10' onClick={() => { props.addDiceCallback({maxValue: 10, id: uniqueId()}) }}>10</button>\n      <button className='dice d12' onClick={() => { props.addDiceCallback({maxValue: 12, id: uniqueId()}) }}>12</button>\n      <button className='dice d20' onClick={() => { props.addDiceCallback({maxValue: 20, id: uniqueId()}) }}>20</button>\n    </div>\n  );\n}\n\nexport default DicePicker;","import React from 'react';\nimport './Dice.css';\nvar classNames = require('classnames');\n\nfunction Dice(props) {\n  return (\n    <button\n      className={classNames({\n        'dice': true,\n        'd4': props.maxValue === '4',\n        'd6': props.maxValue === '6',\n        'd8': props.maxValue === '8',\n        'd10': props.maxValue === '10',\n        'd12': props.maxValue === '12',\n        'd20': props.maxValue === '20',\n      })}\n      onClick={() => {props.onClick()}}\n    >\n      d{props.maxValue}: {props.diceValue}\n    </button>\n  );\n}\n\nexport default Dice;","import React, { useState } from 'react';\nimport './App.css';\nimport DicePicker from './components/DicePicker/DicePicker';\nimport Dice from './components/Dice/Dice';\n\nfunction App() {\n\n  const [rolledDice, setRolledDice] = useState([]);\n  const [total, setTotal] = useState(0);\n\n  function addNewDice(dice) {\n    // roll it\n    dice.value = rollDice(dice.maxValue);\n    // add it to the state\n    setRolledDice(rolledDice.concat(dice));\n    // update the total\n    setTotal(total + dice.value);\n  }\n\n  function removeDice(id) {\n    // console.log('deleting dice with id: ' + id);\n\n    var removeIndex = rolledDice.map(\n      (dice) => { return dice.id }).indexOf(id);\n\n    setTotal(total - rolledDice[removeIndex].value);\n\n    setRolledDice(rolledDice.filter(item => item.id !== id));\n  }\n\n  function rerollAll() {\n    var newTotal = 0;\n    var newRolledDice = rolledDice.map((dice) => {\n      const newDice = {\n        id: dice.id,\n        maxValue: dice.maxValue,\n        value: rollDice(dice.maxValue)\n      }\n\n      newTotal += newDice.value;\n\n      return newDice;\n    })\n\n    setRolledDice(newRolledDice);\n    setTotal(newTotal);\n  }\n\n  function rollDice(maxValue) {\n    const value = Math.floor(Math.random() * maxValue) + 1;\n    // console.log('rolled a ' + value + ' on a d' + maxValue);\n    return value;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"roll-collection\">\n        {rolledDice.map((dice) =>\n          <Dice\n            maxValue={dice.maxValue}\n            diceValue={dice.value}\n            onClick={() => { removeDice(dice.id) }}\n            key={dice.id}\n          >\n          </Dice>\n        )}\n        <div className='roll-total'>Total: {total}</div>\n      </div>\n      <DicePicker addDiceCallback={addNewDice}></DicePicker>\n      <button onClick={rerollAll}>Roll</button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}